[General]
sim-time-limit = 15s
network = industrial_network

## Class      PCP
## CDT         6
## ClassA      5 
## ClassB      4
## BestEffort  0

#####################################################

# disable master clock
*.masterClock.typename = ""

*.*Switch.typename = "EthernetSwitch"

# use TSN clock
# *.masterClock.typename = "TsnClock"

# other Ethernet links are 1Gbps
*.*.eth[*].bitrate = 1Gbps

# disable local multicast loop
**.udp.defaultMulticastLoop = false
###########################################################

#############################
# Stream Coding Configuration
# enable outgoing TSN streams
*.*.hasOutgoingStreams = true
*.*.hasIncomingStreams = true
###############################
# Traffic Shaping Configuration
# enable egress traffic shaping
*.*.hasEgressTrafficShaping = true
####################################
# disable forwarding IEEE 802.1Q C-Tag
*.SW*.bridging.directionReverser.reverser.excludeEncapsulationProtocols = ["ieee8021qctag"]

# N1 application
*.N1.numApps = 1

#Talker:S1
*.N1.app[0].typename = "UdpSourceApp"
*.N1.app[0].display-name = "S1 Talker"
*.N1.app[0].source.packetNameFormat = "%M->HU:CLASS_A-%c"
*.N1.app[0].source.packetLength = 500B
*.N1.app[0].source.productionInterval = 2875us
*.N1.app[0].io.destAddress = "N8"
*.N1.app[0].io.destPort = 1000

# N2 applications
*.N2.numApps = 2

#Talker:S2
*.N2.app[0].typename = "UdpSourceApp"
*.N2.app[0].display-name = "S2 Talker"
*.N2.app[0].source.packetNameFormat = "%M->CU:CLASS_B-%c"
*.N2.app[0].source.packetLength = 500B
*.N2.app[0].source.productionInterval = 3500us
*.N2.app[0].io.destAddress = "N8"
*.N2.app[0].io.destPort = 1001

#Talker:S3
*.N2.app[1].typename = "UdpSourceApp"
*.N2.app[1].display-name = "S3 Talker"
*.N2.app[1].source.packetNameFormat = "%M->CU:CLASS_A-%c"
*.N2.app[1].source.packetLength = 46B
*.N2.app[1].source.productionInterval = 4000us
*.N2.app[1].io.destAddress = "N8"
*.N2.app[1].io.destPort = 1002

# N3 applications
*.N3.numApps = 1

#Talker:S4
*.N3.app[0].typename = "UdpSourceApp"
*.N3.app[0].display-name = "S4 Talker"
*.N3.app[0].source.packetNameFormat = "%M->CU:CLASS_A-%c"
*.N3.app[0].source.packetLength = 46B
*.N3.app[0].source.productionInterval = 4000us
*.N3.app[0].io.destAddress = "N8"
*.N3.app[0].io.destPort = 1003

# N4 applications
*.N4.numApps = 1

#Talker:S5
*.N4.app[0].typename = "UdpSourceApp"
*.N4.app[0].display-name = "S5 Talker"
*.N4.app[0].source.packetNameFormat = "%M->CU:CLASS_A-%c"
*.N4.app[0].source.packetLength = 500B
*.N4.app[0].source.productionInterval = 1875us
*.N4.app[0].io.destAddress = "N8"
*.N4.app[0].io.destPort = 1004

# N5 applications
*.N5.numApps = 1

#Talker:S6
*.N5.app[0].typename = "UdpSourceApp"
*.N5.app[0].display-name = "S6 Talker"
*.N5.app[0].source.packetNameFormat = "%M->CU:CLASS_A-%c"
*.N5.app[0].source.packetLength = 500B
*.N5.app[0].source.productionInterval = 1500us
*.N5.app[0].io.destAddress = "N8"
*.N5.app[0].io.destPort = 1005

# N6 applications
*.N6.numApps = 1

#Talker:S7
*.N6.app[0].typename = "UdpSourceApp"
*.N6.app[0].display-name = "S7 Talker"
*.N6.app[0].source.packetNameFormat = "%M->CU:CLASS_B-%c"
*.N6.app[0].source.packetLength = 500B
*.N6.app[0].source.productionInterval = 3000us
*.N6.app[0].io.destAddress = "N8"
*.N6.app[0].io.destPort = 1006

# N7 applications
*.N7.numApps = 1

#Talker:S8
*.N7.app[0].typename = "UdpSourceApp"
*.N7.app[0].display-name = "S8 Talker"
*.N7.app[0].source.packetNameFormat = "%M->CU:CLASS_A-%c"
*.N7.app[0].source.packetLength = 200B
*.N7.app[0].source.productionInterval = 1250us
*.N7.app[0].io.destAddress = "N8"
*.N7.app[0].io.destPort = 1007

# N8 applications
*.N8.numApps = 8

#Listener: S1
*.N8.app[0].typename = "UdpSinkApp"
*.N8.app[0].display-name = "S1 Listener"
*.N8.app[0].io.localPort = 1000

#Listener: S2
*.N8.app[1].typename = "UdpSinkApp"
*.N8.app[1].display-name = "S2 Listener"
*.N8.app[1].io.localPort = 1001

#Listener: S3
*.N8.app[2].typename = "UdpSinkApp"
*.N8.app[2].display-name = "S3 Listener"
*.N8.app[2].io.localPort = 1002

#Listener: S4
*.N8.app[3].typename = "UdpSinkApp"
*.N8.app[3].display-name = "S4 Listener"
*.N8.app[3].io.localPort = 1003

#Listener: S5
*.N8.app[4].typename = "UdpSinkApp"
*.N8.app[4].display-name = "S5 Listener"
*.N8.app[4].io.localPort = 1004

#Listener: S6
*.N8.app[5].typename = "UdpSinkApp"
*.N8.app[5].display-name = "S6 Listener"
*.N8.app[5].io.localPort = 1005

#Listener: S7
*.N8.app[6].typename = "UdpSinkApp"
*.N8.app[6].display-name = "S7 Listener"
*.N8.app[6].io.localPort = 1006

#Listener: S8
*.N8.app[7].typename = "UdpSinkApp"
*.N8.app[7].display-name = "S8 Listener"
*.N8.app[7].io.localPort = 1007

# Stream Coding Configuration
# N1 stream identification and coding
*.N1.bridging.streamIdentifier.identifier.mapping = [{stream: "S1 Talker", packetFilter: expr(udp.destPort == 1000)}]
*.N1.bridging.streamCoder.encoder.mapping = [{stream: "S1 Talker", pcp: 5}]

# N2 stream identification and coding
*.N2.bridging.streamIdentifier.identifier.mapping = [{stream: "S2 Talker", packetFilter: expr(udp.destPort == 1001)},
														{stream: "S3 Talker", packetFilter: expr(udp.destPort == 1002)},]
*.N2.bridging.streamCoder.encoder.mapping = [{stream: "S2 Talker", pcp: 4},
												{stream: "S3 Talker", pcp: 5}]

# N3 stream identification and coding
*.N3.bridging.streamIdentifier.identifier.mapping = [{stream: "S4 Talker", packetFilter: expr(udp.destPort == 1003)}]
*.N3.bridging.streamCoder.encoder.mapping = [{stream: "S4 Talker", pcp: 5}]

# N4 stream identification and coding
*.N4.bridging.streamIdentifier.identifier.mapping = [{stream: "S5 Talker", packetFilter: expr(udp.destPort == 1004)}]
*.N4.bridging.streamCoder.encoder.mapping = [{stream: "S5 Talker", pcp: 5}]

# N5 stream identification and coding
*.N5.bridging.streamIdentifier.identifier.mapping = [{stream: "S6 Talker", packetFilter: expr(udp.destPort == 1005)}]
*.N5.bridging.streamCoder.encoder.mapping = [{stream: "S6 Talker", pcp: 5}]

# N6 stream identification and coding
*.N6.bridging.streamIdentifier.identifier.mapping = [{stream: "S7 Talker", packetFilter: expr(udp.destPort == 1006)}]
*.N6.bridging.streamCoder.encoder.mapping = [{stream: "S7 Talker", pcp: 4}]

# N7 stream identification and coding
*.N7.bridging.streamIdentifier.identifier.mapping = [{stream: "S8 Talker", packetFilter: expr(udp.destPort == 1007)}]
*.N7.bridging.streamCoder.encoder.mapping = [{stream: "S8 Talker", pcp: 5}]

# SWs  
*.SW*.bridging.streamCoder.decoder.mapping = [	{source: "N1", pcp: 5, stream: "S1 Talker"},
												{source: "N2", pcp: 4, stream: "S2 Talker"},
												{source: "N2", pcp: 5, stream: "S3 Talker"},
												{source: "N3", pcp: 5, stream: "S4 Talker"},
												{source: "N4", pcp: 5, stream: "S5 Talker"},
												{source: "N5", pcp: 5, stream: "S6 Talker"},
												{source: "N6", pcp: 4, stream: "S7 Talker"},
												{source: "N7", pcp: 5, stream: "S8 Talker"}]

*.SW*.bridging.streamCoder.encoder.mapping = [  {stream: "S1 Talker", pcp: 5},
												{stream: "S2 Talker", pcp: 4},
												{stream: "S3 Talker", pcp: 5},
												{stream: "S4 Talker", pcp: 5},
												{stream: "S5 Talker", pcp: 5},
												{stream: "S6 Talker", pcp: 5},
												{stream: "S7 Talker", pcp: 4},
												{stream: "S8 Talker", pcp: 5}]
###########################################################

# Traffic Shaping Configuration

# credit based shaper for AVB classes
*.SW*.eth[*].macLayer.queue.transmissionSelectionAlgorithm[1..2].typename = "Ieee8021qCreditBasedShaper"

*.SW*.eth[*].macLayer.queue.numTrafficClasses = 2
*.SW*.eth[*].macLayer.queue.transmissionSelectionAlgorithm[1].idleSlope = 600Mbps
*.SW*.eth[*].macLayer.queue.transmissionSelectionAlgorithm[2].idleSlope = 150Mbps

###########################################################

# PCAP Recorder

#*.SW1.numPcapRecorders = 1
#*.SW1.pcapRecorder[0].moduleNamePatterns = "eth[*]"
#*.SW1.pcapRecorder[0].pcapFile = "results/sw1.eth.pcap"
#
#*.SW2.numPcapRecorders = 1
#*.SW2.pcapRecorder[0].moduleNamePatterns = "eth[*]"
#*.SW2.pcapRecorder[0].pcapFile = "results/sw2.eth.pcap"
#
#**.crcMode = "computed"
#**.fcsMode = "computed"

###########################################################

# Frame Preemption Configuration

# enable frame preemption
# *.sw*.hasFramePreemption = true
# *.sw*.eth[*].macLayer.typename = "EthernetPreemptingMacLayer"
# *.sw*.eth[*].phyLayer.typename = "EthernetPreemptingPhyLayer"

###########################################################